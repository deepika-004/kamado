from PIL import Image
def genData(data):
 
        x = []
 
        for i in data:
            x.append(format(ord(i), '08b'))
        return x

def modPix(pix, data):
 
    datalist = genData(data)
    lendata = len(datalist)
    imdata = iter(pix)
    for i in range(lendata):
        pix = [value for value in imdata._next_()[:3] +
                                imdata._next_()[:3] +
                                imdata._next_()[:3]]
        
        for j in range(0, 8):
            if (datalist[i][j] == '0' and pix[j]% 2 != 0):
                pix[j] -= 1
 
            elif (datalist[i][j] == '1' and pix[j] % 2 == 0):
                if(pix[j] != 0):
                    pix[j] -= 1
                else:
                    pix[j] += 1
        if (i == lendata - 1):
            if (pix[-1] % 2 == 0):
                if(pix[-1] != 0):
                    pix[-1] -= 1
                else:
                    pix[-1] += 1
 
        else:
            if (pix[-1] % 2 != 0):
                pix[-1] -= 1
 
        pix = tuple(pix)
        yield pix[0:3]
        yield pix[3:6]
        yield pix[6:9]
 
def enc(newimg, data):
    w = newimg.size[0]
    (x, y) = (0, 0)
 
    for pixel in modPix(newimg.getdata(), data):
        newimg.putpixel((x, y), pixel)
        if (x == w - 1):
            x = 0
            y += 1
        else:
            x += 1
def encode():
    img = input("Cover file path : ")
    image = Image.open(img, 'r')
 
    msg = input("Enter data to be encoded : ")
    if (len(msg) == 0):
        raise ValueError('Empty')
 
    newimg = image.copy()
    enc(newimg, msg)
 
    new_name = input("Enter the name of new image.png : ")
    newimg.save(new_name, str(new_name.split(".")[1].upper()))
 
def decode():
    img = input("Enter image to be decode: ")
    image = Image.open(img, 'r')
 
    x = ''
    imgdata = iter(image.getdata())
 
    while (True):
        pixels = [value for value in imgdata._next_()[:3] +
                                imgdata._next_()[:3] +
                                imgdata._next_()[:3]]
        y = ''
 
        for i in pixels[:8]:
            if (i % 2 == 0):
                y += '0'
            else:
                y += '1'
 
        x += chr(int(y, 2))
        if (pixels[-1] % 2 != 0):
            return x
def main():
    n = int(input("Choose one\n"
                        "1. Encode\n2. Decode\n"))
    if (n == 1):
        encode()
 
    elif (n == 2):
        print("Message in it is :  " + decode())
    else:
        raise Exception("INCORRECT INPUT")
 
if _name_ == '_main_' :
    main()
